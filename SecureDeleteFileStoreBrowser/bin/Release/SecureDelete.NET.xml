<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SecureDelete.NET</name>
    </assembly>
    <members>
        <member name="F:SecureDelete.Schedule.PowerNotificationsReceiver.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SecureDelete.Schedule.PowerNotificationsReceiver.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SecureDelete.Schedule.PowerNotificationsReceiver.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionTree.NewNodeByType(SecureDelete.FileSearch.ExpressionType,System.Object)">
            <summary>
            Creates a new node of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="item">The item to add to the node.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionTree.AddRoot(SecureDelete.FileSearch.ExpressionType,System.Object)">
            <summary>
            Adds the root node of the tree.
            </summary>
            <param name="type">The node type.</param>
            <param name="item">The item to add to the node.</param>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionTree.AddNode(SecureDelete.FileSearch.ExpressionNode,SecureDelete.FileSearch.TreeDirection,SecureDelete.FileSearch.ExpressionType,System.Object)">
            <summary>
            Adds the node.
            </summary>
            <param name="parent">The parent.</param>
            <param name="direction">The direction.</param>
            <param name="type">The type.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionTree.DestroyParentChildRelationship(SecureDelete.FileSearch.ExpressionNode)">
            <summary>
            Method executed before serialization in order to destory the parent-child relationship
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionTree.EstablishParentChildRelationship(SecureDelete.FileSearch.ExpressionNode)">
            <summary>
            Method executed after deserialization in order to establish the parent-child relationship
            </summary>
        </member>
        <member name="M:SecureDelete.Actions.BridgeFactory.GetBridgeObjects(System.Reflection.Assembly)">
            <summary>
             Instantiate the bridge objects found in the given assembly.
            </summary>
        </member>
        <member name="M:SecureDelete.Actions.BridgeFactory.GetBridgeObjects">
            <summary>
             Instantiate the bridge objects found in the executing assembly.
             </summary>
        </member>
        <member name="M:SecureDelete.Actions.BridgeFactory.GetBridgeObjects(System.String)">
            <summary>
             Instantiate the bridge objects found in the assembly located at the given path.
             </summary>
        </member>
        <member name="T:SecureDelete.Schedule.ISchedule">
            <summary>
            Interface that needs to be implemented by all schedule type classes
            </summary>
        </member>
        <member name="T:SecureDelete.FileSearch.FileSearchArgs">
            <summary>
            Used to notify the user that a series of files was founded.
            </summary>
        </member>
        <member name="T:SecureDelete.FileSearch.FileSearchDelegate">
            <summary>
            Used to notify the user that a series of files was founded.
            </summary>
        </member>
        <member name="T:SecureDelete.FileSearch.FileSearcher">
            <summary>
            Provides support for searching files in directories and their subdirectories.
            Search can be performed asynchronously.
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.FileSearcher.SearchFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Search files
            </summary>
            <param name="folder">The folder where to begin searching.</param>
            <param name="pattern">The pattern the files need to match (ex. *.txt).</param>
            <param name="includeSubfolders">Specifies whether or not to search the subfolders.</param>
            <returns>An array of FileInfo structures describing the founded files.</returns>
        </member>
        <member name="M:SecureDelete.FileSearch.FileSearcher.SearchFilesAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Search files asynchronously
            </summary>
            <param name="folder">The folder where to begin searching.</param>
            <param name="pattern">The pattern the files need to match (ex. *.txt).</param>
            <param name="includeSubfolders">Specifies whether or not to search the subfolders.</param>
        </member>
        <member name="T:SecureDelete.ContextStatus">
            <summary>
            The status of the context.
            </summary>
        </member>
        <member name="T:SecureDelete.WipeContext">
            <summary>
            Manages a native wipe context.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.ValidResult(System.Int32)">
            <summary>
            Check the result received from the native methods
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.CheckContextClosed">
            <summary>
            Throw an exception if the context is not closed
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.CheckContextOpen">
            <summary>
            Trow an exception if the context is not open
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.CheckContextInitialized">
            <summary>
            Trow an exception if the context is not initialized
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.CreateContext">
            <summary>
            Create a context
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.DestroyContext">
            <summary>
            Destroy a context
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.InitializeContext(SecureDelete.NativeMethods.WOptions)">
            <summary>
            Initialize the context with the given settings
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.SetContextStatus(SecureDelete.ContextStatus)">
            <summary>
            Set the status of the context (wipe,paused,stopped)
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetContextStatus(SecureDelete.ContextStatus@)">
            <summary>
            Get the status from the native context
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetWipeStatus(SecureDelete.NativeMethods.WStatus@)">
            <summary>
            Get the wipe status of the context
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetChildrenNumber(System.Int32@)">
            <summary>
            Get the number of children
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetChildWipeStatus(System.Int32,SecureDelete.NativeMethods.WStatus@)">
            <summary>
            Get the wipe status of a child
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.InsertObject(SecureDelete.NativeMethods.WObject)">
            <summary>
            Insert an object into the context
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.InserObjectRange(SecureDelete.NativeMethods.WObject[])">
            <summary>
            Insert object from an array into the context
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetErrorNumber(System.Int32@)">
            <summary>
            Get the error number
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetError(System.Int32,SecureDelete.NativeMethods.WError@)">
            <summary>
            Get an error by its index
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetErrors">
            <summary>
            Get all errors
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetFailedObjectNumber(System.Int32@)">
            <summary>
            Get the number of failed objects
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetFailedObject(System.Int32,SecureDelete.NativeMethods.WSmallObject@,System.Boolean,SecureDelete.NativeMethods.WError@)">
            <summary>
            Get an failed object, and optionally, its associated error
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetFailedObjects">
            <summary>
            Get all failed objects
            </summary>
        </member>
        <member name="M:SecureDelete.WipeContext.GetFailedObjectsWithErrors">
            <summary>
            Get all failed objects with their associated errors
            </summary>
        </member>
        <member name="T:SecureDelete.WipeStepBase">
            <summary>
            The abstract class from where all wipe steps must derive.
            </summary>
        </member>
        <member name="T:SecureDelete.PatternWipeStep">
            <summary>
            Wipe step where the data is a pattern.
            </summary>
        </member>
        <member name="M:SecureDelete.PatternWipeStep.FromNative(System.String,System.Char[])">
            <summary>
            Get the step from the native form
            </summary>
        </member>
        <member name="M:SecureDelete.PatternWipeStep.ToNative">
            <summary>
            Get the native form of the step
            </summary>
        </member>
        <member name="T:SecureDelete.RandomWipeStep">
            <summary>
            Wipe step where the data is random.
            </summary>
        </member>
        <member name="M:SecureDelete.RandomWipeStep.ToNative">
            <summary>
            Get the native form of the step
            </summary>
        </member>
        <member name="T:SecureDelete.RandomByteStep">
            <summary>
            Wipe step where the data is a random byte.
            </summary>
        </member>
        <member name="M:SecureDelete.RandomByteStep.ToNative">
            <summary>
            Get the native form of the step
            </summary>
        </member>
        <member name="T:SecureDelete.ComplementStep">
            <summary>
            Wipe step where the data is the complement of the previous data.
            </summary>
        </member>
        <member name="M:SecureDelete.ComplementStep.ToNative">
            <summary>
            Get the native form of the step
            </summary>
        </member>
        <member name="T:SecureDelete.Actions.IBridge">
            <summary>
            Interface that needs to be implemented by all bridge objects.
            </summary>
        </member>
        <member name="M:SecureDelete.Schedule.TaskManager.ForceStopTask(SecureDelete.Schedule.ScheduledTask)">
            <summary>
            Stop a task, event if it's in wiping mode
            </summary>
        </member>
        <member name="M:SecureDelete.Schedule.TaskManager.AddTask(SecureDelete.Schedule.ScheduledTask,System.Boolean)">
            <summary>
            
            </summary>
            <remarks>Used on the client side only.</remarks>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.Schedule.TaskManager.StartTask(System.Guid)">
            <summary>
            Schedule the task.
            </summary>
        </member>
        <member name="M:SecureDelete.Schedule.TaskManager.ForceStartTask(System.Guid)">
            <summary>
            Start the task in wipe mode.
            </summary>
        </member>
        <member name="M:SecureDelete.Schedule.TaskManager.ForceStopTask(System.Guid)">
            <summary>
            Stop a task, event if it's in wiping mode
            </summary>
        </member>
        <member name="P:SecureDelete.Schedule.PowerTaskController.BaseControl">
            <summary>
            Used when running from WinForms.
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ImageFilter.AllowProperty(System.Boolean,SecureDelete.FileSearch.ImageData)">
            <summary>
            Abstract method that needs to be implemented in the derived objects
            </summary>
        </member>
        <member name="P:SecureDelete.FileSearch.ImageFilter.PropertyType">
            <summary>
            Abstract property that needs to be implemented in the derived objects
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetTitle(SecureDelete.FileSearch.ImageData)">
            <summary>
            Camera maker
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetMaker(SecureDelete.FileSearch.ImageData)">
            <summary>
            Camera maker
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetModel(SecureDelete.FileSearch.ImageData)">
            <summary>
            Camera model
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetOrientation(SecureDelete.FileSearch.ImageData)">
            <summary>
            Orientation
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetSoftware(SecureDelete.FileSearch.ImageData)">
            <summary>
            Software
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetAuthor(SecureDelete.FileSearch.ImageData)">
            <summary>
            Author
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetCopyright(SecureDelete.FileSearch.ImageData)">
            <summary>
            Copyright
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetExposureTime(SecureDelete.FileSearch.ImageData)">
            <summary>
            Exposure time
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetFNumber(SecureDelete.FileSearch.ImageData)">
            <summary>
            FNumber
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetExposureProgram(SecureDelete.FileSearch.ImageData)">
            <summary>
            Exposure program
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetIso(SecureDelete.FileSearch.ImageData)">
            <summary>
            ISO
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetDateTaken(SecureDelete.FileSearch.ImageData)">
            <summary>
            Taken date
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetExposureBias(SecureDelete.FileSearch.ImageData)">
            <summary>
            Exposure bias
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetMeteringMode(SecureDelete.FileSearch.ImageData)">
            <summary>
            Metering mode
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetFlashFired(SecureDelete.FileSearch.ImageData)">
            <summary>
            Flash fired
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExifReader.GetFocalLength(SecureDelete.FileSearch.ImageData)">
            <summary>
            Focal length
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.ContainsReport(SecureDelete.ReportInfo)">
            <summary>
            Verifies if the given report is available
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.GetReportPath(SecureDelete.ReportInfo)">
            <summary>
            Genereates the path of the report.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.RemoveReport(SecureDelete.ReportInfo)">
            <summary>
            Removes the report from the disk and from the database.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.TrimCategoryExcess(System.Guid)">
            <summary>
            Removes Reports from the category if there are too many.
            </summary>
            <remarks>
            Older Reports are removed first.
            </remarks>
        </member>
        <member name="M:SecureDelete.WipeReportManager.TrimAllCategories">
            <summary>
            Remove the excess from all categories.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.AddReport(SecureDelete.WipeReport,SecureDelete.ReportInfo@)">
            <summary>
            Add the report to the database.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.GetReports(System.Guid)">
            <summary>
            Return all Reports matching the given GUID
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.SaveReport(SecureDelete.WipeReport,SecureDelete.ReportInfo)">
            <summary>
            Save the report to disk.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.LoadReport(SecureDelete.ReportInfo)">
            <summary>
            Load the report from disk.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.SaveReportCategories(System.String)">
            <summary>
            Save the report database to disk.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.LoadReportCategories(System.String)">
            <summary>
            Load the report database from disk.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.RemoveCategory(System.Guid)">
            <summary>
            Removes the specified category (including all its Reports).
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.DestroyDatabase">
            <summary>
            Remove all categories.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeReportManager.ReportExists(SecureDelete.ReportInfo)">
            <summary>
            Verifies if the given report exists on disk.
            </summary>
        </member>
        <member name="M:SecureDelete.Schedule.HistoryManager.SaveHistory(System.String)">
            <summary>
            Save the history database to disk.
            </summary>
        </member>
        <member name="M:SecureDelete.Schedule.HistoryManager.LoadHistory(System.String)">
            <summary>
            Load the report database from disk.
            </summary>
        </member>
        <member name="T:SecureDelete.WipePlugin.PluginManager">
            <summary>
            Provides support for managing the loaded plugins.
            </summary>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginManager.AddPlugins(System.String)">
            <summary>
            Add all containing plugins from the given assembly
            </summary>
            <param name="path">The path of the assembly.</param>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginManager.AddPlugins(System.Reflection.Assembly)">
            <summary>
            Add all containing plugins from the given assembly
            </summary>
            <param name="path">The assembly.</param>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginManager.GetPlugin(System.String)">
            <summary>
            Get the plugins with the specified name
            </summary>
            <param name="name">The name of the plugins.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginManager.DestroyAllPlugins">
            <summary>
            Destroy all instances of the plugins
            </summary>
            <remarks>The plugins are not removed from the manager. For this functionality, use ClearList instead.</remarks>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginManager.ClearList">
            <summary>
            Clear the category of plugins
            </summary>
        </member>
        <member name="T:SecureDelete.IWipeObject">
            <summary>
            Interface that needs to be used by all WipeObjects
            </summary>
        </member>
        <member name="M:SecureDelete.IWipeObject.GetObject">
            <summary>
            Used when SingleObject is true
            </summary>
        </member>
        <member name="M:SecureDelete.WipeObjects.FolderWipeObject.GetObject">
            <summary>
            Get the folder object. SingleObject should be set to true.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeObjects.FolderWipeObject.GetObjects">
            <summary>
            Get the file (and folder) objects. SingleObject should be set to false.
            </summary>
        </member>
        <member name="T:SecureDelete.WipeObjects.TestWipeObject">
            <summary>
            Class used only for testing the asynchronous wipe mode.
            </summary>
        </member>
        <member name="T:SecureDelete.Actions.IAction">
            <summary>
            Interface from which all actions need to derive.
            </summary>
        </member>
        <member name="T:SecureDelete.Actions.Bridge">
            <summary>
            Attribute that needs to be applied to all bridge objects.
            </summary>
        </member>
        <member name="T:SecureDelete.Actions.BridgeMember">
            <summary>
            Attribute that needs to be applied to all members of the object that should be exposed.
            </summary>
        </member>
        <member name="T:SecureDelete.Actions.BridgeMemberParameter">
            <summary>
            Attribute that needs to be applied for each parameter of the exposed method.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeObjects.DriveWipeObject.GetObjects">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:SecureDelete.WipeObjects.DriveWipeObject.Stop">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:SecureDelete.WipeObjects.DriveWipeObject.AddDrive(System.Char)">
            <summary>
            Add a drive
            </summary>
        </member>
        <member name="M:SecureDelete.WipeObjects.DriveWipeObject.RemoveDrive(System.Char)">
            <summary>
            Remove a drive
            </summary>
        </member>
        <member name="M:SecureDelete.WipeObjects.DriveWipeObject.ClearDrives">
            <summary>
            Remove all drives
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.XmpReader.GetRating(SecureDelete.FileSearch.ImageData)">
            <summary>
            Rating
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.XmpReader.GetTags(SecureDelete.FileSearch.ImageData)">
            <summary>
            Tags
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.XmpReader.GetTitle(SecureDelete.FileSearch.ImageData)">
            <summary>
            Title
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.XmpReader.GetAuthors(SecureDelete.FileSearch.ImageData)">
            <summary>
            Authors
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionEvaluator.VerifyParantesis(System.String)">
            <summary>
            Verifies the parantesis.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionEvaluator.GetImplicationType(System.String,SecureDelete.FileSearch.FilterImplication@)">
            <summary>
            Gets the type of the implication.
            </summary>
            <param name="s">The string.</param>
            <param name="implication">The implication.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionEvaluator.GetFilter(System.String)">
            <summary>
            Gets the filter with the specified name.
            </summary>
            <param name="s">The string.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionEvaluator.AssociateElements(SecureDelete.FileSearch.ExpressionEvaluator.ExpressionElement[],System.Int32)">
            <summary>
            Associates the given tree elements.
            </summary>
            <param name="elements">The elements.</param>
            <param name="elementCount">The element count.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionEvaluator.ParseExpression(System.String,System.Int32,SecureDelete.FileSearch.ExpressionTree@,System.Int32@)">
            <summary>
            Parses the expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="start">The start position.</param>
            <param name="tree">The tree.</param>
            <param name="expressionLength">Length of the expression.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionEvaluator.TreeToString(SecureDelete.FileSearch.ExpressionNode)">
            <summary>
            Converts the tree to string representation.
            </summary>
            <param name="node">The base node.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionEvaluator.EvaluateExpression(System.String)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.FileSearch.ExpressionEvaluator.GetExpressionTreeString(SecureDelete.FileSearch.ExpressionTree)">
            <summary>
            Gets the expression tree string.
            </summary>
            <param name="tree">The tree.</param>
            <returns></returns>
        </member>
        <member name="T:SecureDelete.WipePlugin.Plugin">
            <summary>
            Wrapper for a IPlugin interface derived object.
            Provides support for instantiating the plugin.
            </summary>
        </member>
        <member name="M:SecureDelete.WipePlugin.Plugin.CreateInstance">
            <summary>
            Create an instance of the plugin
            </summary>
        </member>
        <member name="M:SecureDelete.WipePlugin.Plugin.DestroyInstance">
            <summary>
            Destroy the current instance of the plugin
            </summary>
        </member>
        <member name="T:SecureDelete.WipePlugin.StoreId">
            <summary>
            Represents the ID used to identify the plugin saved data.
            </summary>
        </member>
        <member name="T:SecureDelete.WipePlugin.StoreItem">
            <summary>
            Represents the data that a plugin stores.
            </summary>
        </member>
        <member name="T:SecureDelete.WipePlugin.PluginSettings">
            <summary>
            Provides a centralized storage for all plugin settings.
            </summary>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginSettings.LoadSettings">
            <summary>
            Load the settings from the settings file
            </summary>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginSettings.SaveSettings">
            <summary>
            Save the setting to the settings file
            </summary>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginSettings.SavePluginSettings(SecureDelete.WipePlugin.Plugin)">
            <summary>
            Save the settings
            </summary>
            <param name="plugin">The plugin for which to save the settings.</param>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginSettings.LoadPluginSettings(SecureDelete.WipePlugin.Plugin)">
            <summary>
            Load the settings
            </summary>
            <param name="plugin">The plugin for which to load the settings.</param>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginSettings.RemovePluginSettings(SecureDelete.WipePlugin.Plugin)">
            <summary>
            Remove the settings
            </summary>
            <param name="plugin">The plugin for which to remove the settings.</param>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginSettings.RemoveAllSettings">
            <summary>
            Remove all stored settings
            </summary>
        </member>
        <member name="M:SecureDelete.Schedule.PowerManager.GetPowerStatus">
            <summary>
            Method should only be used on XP systems.
            </summary>
        </member>
        <member name="P:SecureDelete.Schedule.PowerManager.BaseControl">
            <summary>
            Used when running from WinForms.
            </summary>
        </member>
        <member name="M:SecureDelete.FileStore.CreateFolder(System.String)">
            <summary>
            Creates a folder.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.FolderExists(System.String)">
            <summary>
            Checks if the given folder exists.
            </summary>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.DeleteFolder(System.String)">
            <summary>
            Deletes a folder.
            </summary>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.MoveFolder(System.String,System.String)">
            <summary>
            Moves a folder.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.GetSubfolders(System.String)">
            <summary>
            Gets a string array of the subfolders in the given folder.
            </summary>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.GetFolderFiles(System.String)">
            <summary>
            Gets a string array of the files in the given folder.
            </summary>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.GetFolderFilesEx(System.String)">
            <summary>
            Gets a StoreFile array of the files in the given folder.
            </summary>
            <param name="path">The folder path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.Format">
            <summary>
            Removes all files and folders from the store.
            </summary>
        </member>
        <member name="M:SecureDelete.FileStore.CreateFile(System.String)">
            <summary>
            Creates a file.
            </summary>
            <param name="path">The file path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.FileExists(System.String)">
            <summary>
            Checks if the given file exists.
            </summary>
            <param name="path">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.FileStore.GetFile(System.String)">
            <summary>
            Gets the file extended information.
            </summary>
            <param name="path">The file path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.WriteFile(SecureDelete.StoreFile,System.Byte[],SecureDelete.StoreMode)">
            <summary>
            Stores the given data into the file.
            </summary>
            <param name="file">The file in which to store the data.</param>
            <param name="data">The data to store.</param>
        </member>
        <member name="M:SecureDelete.FileStore.WriteFile(SecureDelete.StoreFile,System.IO.Stream,SecureDelete.StoreMode)">
            <summary>
            Stores the given data into the file.
            </summary>
            <param name="file">The file in which to store the data.</param>
            <param name="data">The Stream to store.</param>
        </member>
        <member name="M:SecureDelete.FileStore.WriteFile(SecureDelete.StoreFile,System.String,SecureDelete.StoreMode)">
            <summary>
            Stores the data contained in the given file into the file.
            </summary>
            <param name="file">The file in which to store the data.</param>
            <param name="data">The path of the data file.</param>
        </member>
        <member name="M:SecureDelete.FileStore.ReadFile(SecureDelete.StoreFile)">
            <summary>
            Get the contents of the given file.
            </summary>
            <param name="file">The file from which to get the data.</param>
        </member>
        <member name="M:SecureDelete.FileStore.ReadFile(System.String)">
            <summary>
            Get the contents of the given file.
            </summary>
            <param name="file">The path of the file from which to get the data.</param>
        </member>
        <member name="M:SecureDelete.FileStore.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The file path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.MoveFile(System.String,System.String)">
            <summary>
            Moves a file.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.FindFile(System.String,System.String,System.Boolean)">
            <summary>
            Tries to locate the given file.
            </summary>
            <param name="path">The folder from where to start searching.</param>
            <param name="fileName">Name of the file.</param>
            <param name="subfolders">Search in subfolders.</param>
        </member>
        <member name="M:SecureDelete.FileStore.Save(System.String)">
            <summary>
            Saves the store to the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SecureDelete.FileStore.Load(System.String)">
            <summary>
            Loads the store from the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:SecureDelete.FileSearch.FileFilter.AddFilter(SecureDelete.FileSearch.FilterBase)">
            <summary>
            Add the Filter
            </summary>
            <param name="Filter">The Filter to add.</param>
            <remarks>Trows an exception if the Filter is already in added.</remarks>
        </member>
        <member name="M:SecureDelete.FileSearch.FileFilter.RemoveFilter(SecureDelete.FileSearch.FilterBase)">
            <summary>
            Remove the Filter
            </summary>
            <param name="Filter">The Filter to remove.</param>
        </member>
        <member name="M:SecureDelete.FileSearch.FileFilter.RemoveAllFilters">
            <summary>
            Remove all filters
            </summary>
        </member>
        <member name="M:SecureDelete.FileSearch.FileFilter.GetFilter(System.Int32)">
            <summary>
            Get the Filter
            </summary>
            <param name="index">The index where the Filter is located.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.FileSearch.FileFilter.GetFilters(System.Type)">
            <summary>
            Get all filters matching the specified Type
            </summary>
            <param name="filterType">The Type of the Filter.</param>
        </member>
        <member name="M:SecureDelete.FileSearch.FileFilter.AllowFile(System.String)">
            <summary>
            Checks if the file matches the conditions imposed by the filters
            </summary>
            <param name="file">The file to check.</param>
        </member>
        <member name="T:SecureDelete.WipePlugin.PluginAttribute">
            <summary>
            Attribute that needs to be used with all plugins.
            Specifies information about the plugin (name, version, author, etc.)
            </summary>
        </member>
        <member name="T:SecureDelete.WipeMethod">
            <summary>
            Method used to wipe data.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeMethod.Reset">
            <summary>
            Set the object in a clean state
            </summary>
        </member>
        <member name="M:SecureDelete.WipeMethod.ValidateMethod">
            <summary>
            Validate the method
            </summary>
        </member>
        <member name="M:SecureDelete.WipeMethod.ReadNative(System.String)">
            <summary>
            Read the method from the native format
            </summary>
        </member>
        <member name="M:SecureDelete.WipeMethod.SaveNative(System.String)">
            <summary>
            Save the method to native format
            </summary>
        </member>
        <member name="T:SecureDelete.Actions.BridgeLogger">
            <summary>
            Helper object which logs member calls when running the script in test mode.
            </summary>
        </member>
        <member name="M:SecureDelete.Actions.BridgeLogger.LogMethodCall(System.Object[])">
            <summary>
            Log a member call.
            </summary>
            <param name="parameters">The parameters the member received.</param>
            <remarks>The parameters need to be passed to this method in exactly the same order they appear in the member definition.</remarks>
        </member>
        <member name="M:SecureDelete.Actions.BridgeLogger.Clear">
            <summary>
            Clear the list of logged member calls.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeObjects.FileWipeObject.GetObject">
            <summary>
            Get the file object
            </summary>
        </member>
        <member name="M:SecureDelete.WipeObjects.FileWipeObject.GetObjects">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:SecureDelete.WipeObjects.FileWipeObject.Stop">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="T:SecureDelete.RandomProvider">
            <summary>
            The random generator to use
            </summary>
        </member>
        <member name="M:SecureDelete.RandomOptions.ToNative">
            <summary>
            Get the native variant of the RNG options
            </summary>
        </member>
        <member name="M:SecureDelete.WipeOptions.ToNative">
            <summary>
            Get the native variant of the wipe options
            </summary>
        </member>
        <member name="T:SecureDelete.WipePlugin.IPlugin">
            <summary>
            Interface that needs to be used and implemented by all plugins.
            </summary>
        </member>
        <member name="T:SecureDelete.NativeMethods">
            <summary>
            Wrapper for the SecureDelete.dll library
            </summary>
        </member>
        <member name="M:SecureDelete.NativeMethods.CreateContext(System.Int32@)">
            <summary>
            Create a context
            </summary>
            <param name="context">The Id of the created context. </param>
            <returns>The error code of the operation.</returns>
        </member>
        <member name="M:SecureDelete.NativeMethods.DestroyContext(System.Int32)">
            <summary>
            Destroys an existing context
            </summary>
            <param name="context">The id of the context to destroy.</param>
            <returns>The error code of the operation.</returns>
        </member>
        <member name="M:SecureDelete.WipeSession.Initialize">
            <summary>
            Initialize the wipe session. Needs to be called before Start or BeginStart.
            </summary>
        </member>
        <member name="M:SecureDelete.WipeSession.BeginStart(System.AsyncCallback,System.Object)">
            <summary>
            Start wiping asynchronously
            </summary>
            <param name="callback">The method to be called when the operation has been completed.</param>
            <param name="state">The state object.</param>
        </member>
        <member name="M:SecureDelete.WipeSession.EndStart">
            <summary>
            Wait until the start operation has been completed
            </summary>
        </member>
        <member name="M:SecureDelete.WipeSession.Start">
            <summary>
            Start wiping
            </summary>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.WipeSession.GetWipeStatus(SecureDelete.WipeStatus@,System.Boolean)">
            <summary>
            Get the status of the wiping process
            </summary>
            <param name="s">The WipeStatus object where to store the status</param>
            <param name="includeChildren">Include the status of all children of the context</param>
        </member>
        <member name="M:SecureDelete.WipeSession.Stop">
            <summary>
            Stop the wiping process
            </summary>
        </member>
        <member name="M:SecureDelete.WipeSession.Pause">
            <summary>
            Pause the wiping process
            </summary>
        </member>
        <member name="M:SecureDelete.WipeSession.Resume">
            <summary>
            Resume the wiping process
            </summary>
        </member>
        <member name="M:SecureDelete.WipeSession.GetWipeErrors">
            <summary>
            Get the category of wipe errors
            </summary>
        </member>
        <member name="M:SecureDelete.WipeSession.GetFailedObjects(System.Boolean)">
            <summary>
            Get the category of failed objects
            </summary>
            <param name="getAssociatedError">Specifies whether or not to attach the associated error to the wipe object.</param>
            <returns></returns>
        </member>
        <member name="M:SecureDelete.WipeSession.GenerateReport">
            <summary>
            Generate a report containing statistics, failed objects and errors
            </summary>
            <remarks>This method is not intended to be used in conjunction with scheduled tasks.</remarks>
        </member>
        <member name="T:SecureDelete.WipePlugin.PluginReader">
            <summary>
            Provides support for obtaining the plugins contained in an assembly.
            </summary>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginReader.LoadPluginsFromAssembly(System.Reflection.Assembly)">
            <summary>
            Load and instantiate all plugins found in the given assembly
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginReader.LoadAssembly(System.String)">
            <summary>
            Load an assembly
            </summary>
            <param name="assembly">The name of the assembly.</param>
        </member>
        <member name="M:SecureDelete.WipePlugin.PluginReader.LoadPluginsFromAssembly(System.String)">
            <summary>
            Load and instantiate all plugins found in the given assembly
            </summary>
            <param name="assembly">The name of the assembly.</param>
        </member>
        <member name="T:SecureDelete.WebReportStyle">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SecureDelete.WebReportStyle.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SecureDelete.WebReportStyle.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SecureDelete.WebReportStyle.HTMLReportStyle">
             <summary>
               Looks up a localized string similar to .Normal {
            	border-bottom: thin solid #3F5280;
            	border-bottom-style: none;
            	font-family: Arial, Helvetica, sans-serif;
            }
            
            .Header {
            	font-family: &quot;Times New Roman&quot;, Times, serif;
            	font-size: xx-large;
            	color: #40526F;
            	margin-bottom: 1px;
            }
            .Subheader {
            	font-family: Arial, Helvetica, sans-serif;
            	font-size: large;
            	color: #000000;
            	margin-top: 1px;
            	margin-left:2px;
            }
            .Subtitle {
            	border-bottom: thin solid #3F5280;
            	font-family: &quot;Times New Roman&quot;, Times, serif;
            	font-size: x-large;
            	c [rest of string was truncated]&quot;;.
             </summary>
        </member>
    </members>
</doc>
